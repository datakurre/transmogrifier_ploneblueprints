[transmogrifier]
title = Plone Content State Import
description =
include = plone.import.content.common
pipeline = plone.import.content.config

[plone.import.content.config]
blueprint = transmogrifier.pipeline
pipeline =
    plone.import.content.config.source

    plone.import.content.config.pathprefix

    plone.import.content.config.logger

    plone.import.content.filter

    plone.import.content.fix_path

    plone.import.content.config.fix_topic_to_collection
    plone.import.content.subcollection

    plone.import.content.config.set_object_position_in_parent
    plone.import.content.config.set_dates
    plone.import.content.config.set_properties
    plone.import.content.config.set_workflow_history
    plone.import.content.config.set_local_roles
    plone.import.content.config.set_placeful_workflow
    plone.import.content.config.set_context_portlets

    plone.import.content.reindex_object
    plone.import.content.commit

[plone.import.content.config.source]
blueprint = rabbitpy.consumer
routing-key = plone.export.content.config
queue = plone.export.content.config
queue-auto-declare = True
queue-auto-delete = False
ack = false

[plone.import.content.config.pathprefix]
blueprint = transmogrifier.transform
prefix = ${transmogrifier:prefix}
expressions = pathprefix
pathprefix = python:item.__setitem__('_path', '${plone.import.content.config.pathprefix:prefix}' + item.get('_path', ''))

[plone.import.content.config.logger]
blueprint = transmogrifier.logger
level = WARNING
key = _path

[plone.import.content.config.set_object_position_in_parent]
blueprint = plone.gopip.set

[plone.import.content.config.set_dates]
blueprint = plone.dates.set

[plone.import.content.config.set_properties]
blueprint = plone.properties.set

[plone.import.content.config.set_workflow_history]
blueprint = plone.workflow_history.set

[plone.import.content.config.set_local_roles]
blueprint = plone.local_roles.set

[plone.import.content.config.set_placeful_workflow]
blueprint = plone.placeful_workflow.set

[plone.import.content.config.set_context_portlets]
blueprint = plone.portlets.set

[plone.import.content.config.fix_topic_to_collection]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'Topic'
expressions = set_collection
set_collection = python:item.__setitem__('_type', 'Collection')
