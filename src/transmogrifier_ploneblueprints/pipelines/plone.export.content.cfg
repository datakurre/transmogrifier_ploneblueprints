[transmogrifier]
title = Plone Content Export
description = Export given content-types from a Plone site below given prefix

pipeline = plone.export.content
key = plone.export.content
prefix =
content-types =
log-level = INFO

[plone.export.content]
blueprint = transmogrifier.pipeline
pipeline =
    plone.export.content.purge
    plone.export.content.source
    plone.export.content.serialize
    plone.export.content.cleanup
    plone.export.content.commit
    plone.export.content.logger

[plone.export.content.purge]
blueprint = transmogrifier.filter
condition = False

[plone.export.content.source]
blueprint = transmogrifier.pipeline
pipeline =
    plone.export.content.brains
    plone.export.content.filter_types
    plone.export.content.filter_prefix
    plone.export.content.get_path
    plone.export.content.get_object
    plone.export.content.get_type
    plone.export.content.get_uuid
    plone.export.content.get_uuid_parent
    plone.export.content.strip_prefix

[plone.export.content.brains]
blueprint = transmogrifier.from
_brain = context.portal_catalog.unrestrictedSearchResults(sort_on='path')

## XXX: This would be better, but GopIpIndex fails, because conversation does not have REQUEST
# _brain = context.portal_catalog.unrestrictedSearchResults(sort_on='getObjPositionInParent')

[plone.export.content.filter_types]
blueprint = transmogrifier.filter.or
modules = transmogrifier.utils
is_empty_filter = not modules['transmogrifier.utils'].get_words(
                  '${transmogrifier:content-types}')
is_valid_type = _brain.portal_type.replace(' ', '+')
                in modules['transmogrifier.utils'].get_words(
                '${transmogrifier:content-types}')

[plone.export.content.filter_prefix]
blueprint = transmogrifier.filter.or
is_exact = _brain.getPath() == '${transmogrifier:prefix}'
is_below = _brain.getPath().startswith('${transmogrifier:prefix}/')

[plone.export.content.get_path]
blueprint = transmogrifier.set
_path = path:item/_brain/getPath

[plone.export.content.get_object]
blueprint = transmogrifier.set
_object = path:item/_brain/_unrestrictedGetObject

[plone.export.content.get_type]
blueprint = transmogrifier.set
_type = path:item/_brain/portal_type

[plone.export.content.get_uuid]
blueprint = plone.uuid.get

[plone.export.content.get_uuid_parent]
blueprint = plone.uuid.get_parent

[plone.export.content.strip_prefix]
blueprint = transmogrifier.set
condition = _path.startswith('${transmogrifier:prefix}')
_path = _path[len('${transmogrifier:prefix}'):]

[plone.export.content.serialize]
blueprint = transmogrifier.pipeline
pipeline =
    plone.export.content.before_serialize
    plone.export.content.get_rfc822
    plone.export.content.get_rfc822_collection
    plone.export.content.get_creation_date
    plone.export.content.get_modification_date
    plone.export.content.get_effective_date
    plone.export.content.get_expiration_date
    plone.export.content.get_properties
    plone.export.content.get_local_roles
    plone.export.content.get_workflow_history
    plone.export.content.get_placeful_workflow
    plone.export.content.get_object_position_in_parent
    plone.export.content.get_context_portlets
    plone.export.content.get_pam_translation_group
    plone.export.content.after_serialize

[plone.export.content.before_serialize]
blueprint = transmogrifier.pipeline

[plone.export.content.get_rfc822]
blueprint = plone.rfc822.marshall
key = _rfc822

[plone.export.content.get_rfc822_collection]
blueprint = plone.rfc822.marshall_collection
key = _rfc822

[plone.export.content.get_creation_date]
blueprint = transmogrifier.set
creation_date = path:item/_object/creation_date

[plone.export.content.get_modification_date]
blueprint = transmogrifier.set
modification_date = path:item/_object/modification_date

[plone.export.content.get_effective_date]
blueprint = transmogrifier.set
effective_date = path:item/_object/effective_date

[plone.export.content.get_expiration_date]
blueprint = transmogrifier.set
expiration_date = path:item/_object/expiration_date

[plone.export.content.get_properties]
blueprint = plone.properties.get

[plone.export.content.get_workflow_history]
blueprint = transmogrifier.set
_workflow_history = getattr(_object, 'workflow_history', [])

[plone.export.content.get_placeful_workflow]
blueprint = plone.placeful_workflow.get

[plone.export.content.get_object_position_in_parent]
blueprint = plone.folders.gopip.get

[plone.export.content.get_context_portlets]
blueprint = plone.portlets.get
prefix = ${transmogrifier:prefix}

[plone.export.content.get_local_roles]
blueprint = plone.local_roles.get

[plone.export.content.get_pam_translation_group]
blueprint = transmogrifier.set
condition = getattr(_object, '_plone.tg', False)
_plone_tg = getattr(_object, '_plone.tg')

[plone.export.content.after_serialize]
blueprint = transmogrifier.pipeline

[plone.export.content.cleanup]
# Cleanup control _brain, _object and control keys (keys with namespace dots)
blueprint = transmogrifier.transform
cleanup = [item.__delitem__(key) for key in item.keys()
           if '.' in key or key in ['_brain', '_object']]

[plone.export.content.commit]
blueprint = rabbitpy.producer
amqp-uri = amqp://guest:guest@localhost:5672/%2f
routing-key = ${transmogrifier:key}
queue = ${transmogrifier:key}
queue-auto-declare = True
queue-auto-delete = False
serializer = pickle

[plone.export.content.logger]
blueprint = transmogrifier.logger
name = plone.export
level = ${transmogrifier:log-level}
key = _path
