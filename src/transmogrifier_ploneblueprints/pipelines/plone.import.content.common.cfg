[transmogrifier]
title = Plone Content Import (common blueprints)
description =
content-types =
    Document
    Event
    File
    Folder
    Image
    Link
    News+Item
    Topic

[plone.import.content.subcollection]
blueprint = plone.collection.subcollection
condition = python:item['_type'] == 'Collection'

[plone.import.content.filter]
blueprint = transmogrifier.filter.or
modules = transmogrifier.utils
expressions = is_valid_type
is_valid_type = python:item['_type'].replace(' ', '+')
                in modules['transmogrifier.utils'].get_words(
                '${plone.import.content.filter:content-types}')
content-types = ${transmogrifier:content-types}

[plone.import.content.fix_topic_to_collection]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'Topic'
expressions = convert
convert = python:item.replace_header('_type', 'Collection')

[plone.import.content.fix_file_type]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'File'
expressions = convert
convert = python:item.set_param('name', item.get('id', '').decode('utf-8'))

[plone.import.content.fix_news_item_type]
blueprint = transmogrifier.transform
condition = python:item['_type'] == 'News Item' and len(item.get_payload()) == 1
expressions = add_empty_payload
add_empty_payload = python:item.get_payload().append(modules['email'].message.Message())

[plone.import.content.fix_link_type]
blueprint = transmogrifier.set
condition = python:item['_type'] == 'Link' and item.get_payload()
remoteUrl = python:[item.get_payload(), setattr(item, '_payload', None)][0]
# set payload to None, because dexterity Link doesn't have primary fields
# and demarshaller would not accept payload without a primary field

[plone.import.content.fix_dublincore]
blueprint = transmogrifier.set
subjects = python:item.get('subjects', item.get('subject', ''))
expires = python:item.get('expiration_date', item.get('expirationDate', ''))
effective = python:item.get('effective_date', item.get('effectiveDate', ''))
exclude_from_nav = python:item.get('exclude_from_nav', item.get('excludeFromNav', 'False'))
allow_discussion = python:item.get('allow_discussion', item.get('allowDiscussion', 'False'))
table_of_contents = python:item.get('table_of_contents', item.get('tableOfContents', 'False'))

[plone.import.content.fix_path]
blueprint = transmogrifier.codec
_path = unicode:utf-8

[plone.import.content.del_id]
blueprint = transmogrifier.del
keys = id

[plone.import.content.before_create]
blueprint = transmogrifier.pipeline

[plone.import.content.create_folders]
blueprint = plone.folders

[plone.import.content.create_object]
blueprint = plone.constructor

[plone.import.content.after_create]
blueprint = transmogrifier.pipeline

[plone.import.content.fix_portal_type]
blueprint = plone.portal_type

[plone.import.content.set_uuid]
blueprint = plone.uuid.set

[plone.import.content.reindex_object]
blueprint = plone.reindex_object

[plone.import.content.commit]
blueprint = transmogrifier.interval
modules = transaction
expression = python:modules['transaction'].commit()
