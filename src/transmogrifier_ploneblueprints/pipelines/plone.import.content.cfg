[transmogrifier]
title = Plone Content Import
description = Import given content-types from a Plone site below given prefix

key = plone.export.content
commit-interval = 0
default-timezone = UTC
log-level = INFO

content-types =
    Document
    Event
    File
    Folder
    Image
    Link
    News+Item
    Topic
    Collection

    FormFolder
    FieldsetFolder
    FormBooleanField
    FormDateField
    FormFileField
    FormFixedPointField
    FormIntegerField
    FormLabelField
    FormLikertField
    FormLinesField
    FormMailerAdapter
    FormMultiSelectionField
    FormPasswordField
    FormRichLabelField
    FormRichTextField
    FormSaveDataAdapter
    FormSelectionField
    FormStringField
    FormTextField
    FormThanksPage
prefix =

[plone.import.content]
blueprint = transmogrifier.pipeline
pipeline =
    plone.import.content.purge
    plone.import.content.source
    plone.import.content.filter
    plone.import.content.pathprefix
    plone.import.content.pathresolve

    plone.import.content.logger

    plone.import.content.fix_dublincore
    plone.import.content.fix_news_item_type
    plone.import.content.fix_event_type
    plone.import.content.fix_file_type
    plone.import.content.fix_link_type

    plone.import.content.fix_topic_to_collection
    plone.import.content.fix_subtopic_to_collection

    plone.import.content.before_create
    plone.import.content.create_object
    plone.import.content.after_create

    plone.import.content.set_uuid

    plone.import.content.rfc822_demarshall

    plone.import.content.set_object_position_in_parent
    plone.import.content.set_properties
    plone.import.content.set_dates
    plone.import.content.set_context_portlets
    plone.import.content.set_local_roles
    plone.import.content.set_workflow_history
    plone.import.content.set_placeful_workflow

    plone.import.content.before_commit
    plone.import.content.reindex_object
    plone.import.content.commit

[plone.import.content.purge]
blueprint = transmogrifier.filter

[plone.import.content.source]
blueprint = rabbitpy.consumer
routing-key = ${transmogrifier:key}
queue = ${transmogrifier:key}
queue-auto-declare = True
queue-auto-delete = False
ack = false

[plone.import.content.filter]
blueprint = transmogrifier.filter.or
modules = transmogrifier.utils
is_empty_filter = not modules['transmogrifier.utils'].get_words(
                  '${transmogrifier:content-types}')
is_valid_type = _type.replace(' ', '+')
                in modules['transmogrifier.utils'].get_words(
                '${transmogrifier:content-types}')

[plone.import.content.pathprefix]
blueprint = transmogrifier.set
_path = '${transmogrifier:prefix}' + item['_path']

[plone.import.content.pathresolve]
blueprint = plone.uuid.path_from_uuid

[plone.import.content.logger]
blueprint = transmogrifier.logger
level = ${transmogrifier:log-level}
key = _path

[plone.import.content.fix_dublincore]
blueprint = transmogrifier.transform
condition = '_rfc822' in item
remove_id = _rfc822.__delitem__('id')
add_subjects = _rfc822.add_header('subjects', str(_rfc822.get('subject', '')))
add_expires = _rfc822.add_header('expiration_date', str(_rfc822.get('expirationDate', '')))
add_effective = _rfc822.add_header('effective_date', str(_rfc822.get('effectiveDate', '')))
add_exclude_from_nav = _rfc822.add_header('exclude_from_nav', str(_rfc822.get('excludeFromNav', 'False')))
add_allow_discussion = _rfc822.add_header('allow_discussion', str(_rfc822.get('allowDiscussion', 'False')))
add_table_of_contents = _rfc822.add_header('table_of_contents', str(_rfc822.get('tableOfContents', 'False')))
# Note: Adding empty headers do not harm the possibly existing headers.

[plone.import.content.fix_news_item_type]
blueprint = transmogrifier.transform
condition = _type == 'News Item' and '_rfc822' in item and
            len(_rfc822.get_payload()) == 1
modules = email
add_empty_payload = _rfc822.get_payload().append(modules['email'].Message.Message())

[plone.import.content.fix_event_type]
blueprint = transmogrifier.transform
condition = _type == 'Event' and '_rfc822' in item
add_start = _rfc822.add_header('start', str(_rfc822.get('startDate', '')))
add_end = _rfc822.add_header('end', str(_rfc822.get('endDate', '')))
add_name = _rfc822.add_header('contact_name', str(_rfc822.get('contactName', '')))
add_email = _rfc822.add_header('contact_email', str(_rfc822.get('contactEmail', '')))
add_phone = _rfc822.add_header('contact_phone', str(_rfc822.get('contactPhone', '')))
add_url = _rfc822.add_header('event_url', str(_rfc822.get('eventUrl', '')))
# Note: Adding empty headers do not harm the possibly existing headers.

[plone.import.content.fix_file_type]
blueprint = transmogrifier.transform
condition = _type == 'File' and '_rfc822' in item
set_filename = _rfc822.set_param('name', _rfc822.get('id', '').decode('utf-8'))

[plone.import.content.fix_link_type]
blueprint = transmogrifier.transform
condition = _type == 'Link' and '_rfc822' in item
add_remote_url = _rfc822.add_header('remoteUrl', _rfc822.get_payload())
clear_payload = setattr(_rfc822, '_payload', None)
# set payload to None, because dexterity Link doesn't have primary fields
# and demarshaller would not accept payload without a primary field

[plone.import.content.fix_topic_to_collection]
blueprint = transmogrifier.set
condition = _type == 'Topic'
_type = string:Collection

[plone.import.content.fix_subtopic_to_collection]
blueprint = plone.collection.flatten_subcollections

[plone.import.content.before_create]
blueprint = transmogrifier.pipeline

[plone.import.content.create_object]
blueprint = plone.constructor
required = yes

[plone.import.content.after_create]
blueprint = transmogrifier.pipeline

[plone.import.content.set_uuid]
blueprint = plone.uuid.set

[plone.import.content.rfc822_demarshall]
blueprint = plone.rfc822.demarshall
condition = '_rfc822' in item
key = _rfc822

[plone.import.content.set_object_position_in_parent]
blueprint = plone.folders.gopip.set

[plone.import.content.set_properties]
blueprint = plone.properties.set

[plone.import.content.set_dates]
blueprint = plone.dates.set
default_timezone = ${transmogrifier:default-timezone}

[plone.import.content.set_context_portlets]
blueprint = plone.portlets.set
prefix = ${transmogrifier:prefix}

[plone.import.content.set_local_roles]
blueprint = plone.local_roles.set

[plone.import.content.set_workflow_history]
blueprint = plone.workflow_history.set

[plone.import.content.set_placeful_workflow]
blueprint = plone.placeful_workflow.set

[plone.import.content.before_commit]
blueprint = transmogrifier.pipeline

[plone.import.content.reindex_object]
blueprint = plone.reindex_object

[plone.import.content.commit]
blueprint = transmogrifier.interval
modules = transaction
expression = modules['transaction'].commit()
interval = ${transmogrifier:commit-interval}
